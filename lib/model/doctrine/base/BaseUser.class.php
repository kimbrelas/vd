<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('User', 'doctrine');

/**
 * BaseUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $email
 * @property string $password
 * @property string $firstname
 * @property string $lastname
 * @property string $company
 * @property integer $had_trial
 * @property timestamp $trial_expire_date
 * @property timestamp $dob
 * @property string $gender
 * @property integer $primary_address
 * @property integer $is_admin
 * @property Doctrine_Collection $UserSubscription
 * 
 * @method integer             getId()                Returns the current record's "id" value
 * @method string              getEmail()             Returns the current record's "email" value
 * @method string              getPassword()          Returns the current record's "password" value
 * @method string              getFirstname()         Returns the current record's "firstname" value
 * @method string              getLastname()          Returns the current record's "lastname" value
 * @method string              getCompany()           Returns the current record's "company" value
 * @method integer             getHadTrial()          Returns the current record's "had_trial" value
 * @method timestamp           getTrialExpireDate()   Returns the current record's "trial_expire_date" value
 * @method timestamp           getDob()               Returns the current record's "dob" value
 * @method string              getGender()            Returns the current record's "gender" value
 * @method integer             getPrimaryAddress()    Returns the current record's "primary_address" value
 * @method integer             getIsAdmin()           Returns the current record's "is_admin" value
 * @method Doctrine_Collection getUserSubscription()  Returns the current record's "UserSubscription" collection
 * @method User                setId()                Sets the current record's "id" value
 * @method User                setEmail()             Sets the current record's "email" value
 * @method User                setPassword()          Sets the current record's "password" value
 * @method User                setFirstname()         Sets the current record's "firstname" value
 * @method User                setLastname()          Sets the current record's "lastname" value
 * @method User                setCompany()           Sets the current record's "company" value
 * @method User                setHadTrial()          Sets the current record's "had_trial" value
 * @method User                setTrialExpireDate()   Sets the current record's "trial_expire_date" value
 * @method User                setDob()               Sets the current record's "dob" value
 * @method User                setGender()            Sets the current record's "gender" value
 * @method User                setPrimaryAddress()    Sets the current record's "primary_address" value
 * @method User                setIsAdmin()           Sets the current record's "is_admin" value
 * @method User                setUserSubscription()  Sets the current record's "UserSubscription" collection
 * 
 * @package    dukaan
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUser extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('user');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('email', 'string', 60, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 60,
             ));
        $this->hasColumn('password', 'string', 32, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 32,
             ));
        $this->hasColumn('firstname', 'string', 60, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 60,
             ));
        $this->hasColumn('lastname', 'string', 60, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 60,
             ));
        $this->hasColumn('company', 'string', 60, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 60,
             ));
        $this->hasColumn('had_trial', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('trial_expire_date', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('dob', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('gender', 'string', 1, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('primary_address', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('is_admin', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('UserSubscription', array(
             'local' => 'id',
             'foreign' => 'user_id'));
    }
}